{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\Desktop\\\\dpma\\\\frontend\\\\src\\\\components\\\\posts\\\\feed.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport PostItem from \"./post-item\";\nimport Loading from \"../../shared/loading\";\nimport { useFetch } from \"../../shared/hooks/useFetch\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostPlaceholer from \"../placeholders/post-placeholder\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nconst style = {\n  height: 30,\n  border: \"1px solid green\",\n  margin: 6,\n  padding: 8,\n  color: \"#fff\"\n};\nconst RenderPosts = React.memo(({\n  token,\n  uid,\n  img,\n  username\n}) => {\n  const {\n    request,\n    loading,\n    error\n  } = useFetch();\n  const posts = useSelector(state => state.posts);\n  const dispatch = useDispatch();\n\n  const handlePosts = async () => {\n    try {\n      const responseData = await request(process.env.REACT_APP_BACKEND_URL + `/posts?skip=${posts.posts.length}`);\n      dispatch({\n        type: \"FETCH_POSTS\",\n        payload: {\n          posts: responseData.data.posts,\n          length: responseData.data.length\n        }\n      });\n    } catch (err) {\n      console.log(err, error);\n    }\n  };\n\n  useEffect(() => {\n    if (!posts.posts.length) handlePosts();\n    document.title = \"Spher\";\n  }, []);\n  let Posts;\n\n  if (posts.posts && posts.posts.length) {\n    Posts = React.createElement(InfiniteScroll, {\n      dataLength: posts.length,\n      next: handlePosts,\n      hasMore: posts.posts.length < posts.length,\n      loader: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(PostPlaceholer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(PostPlaceholer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })),\n      endMessage: React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        className: \"no-more\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Yay! You have seen it all\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, posts.posts.map(post => {\n      return React.createElement(PostItem, {\n        key: post._id,\n        img: img,\n        username: username,\n        uid: uid,\n        token: token,\n        post: post,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    }), \";\");\n  } else if (error) {\n    Posts = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, error, \" please try again later.\");\n  } else Posts = React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(PostPlaceholer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(PostPlaceholer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(PostPlaceholer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, Posts);\n});\nexport default RenderPosts;","map":{"version":3,"sources":["C:/Users/GIGABYTE/Desktop/dpma/frontend/src/components/posts/feed.js"],"names":["React","useState","useEffect","useCallback","PostItem","Loading","useFetch","useDispatch","useSelector","PostPlaceholer","InfiniteScroll","style","height","border","margin","padding","color","RenderPosts","memo","token","uid","img","username","request","loading","error","posts","state","dispatch","handlePosts","responseData","process","env","REACT_APP_BACKEND_URL","length","type","payload","data","err","console","log","document","title","Posts","textAlign","map","post","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport PostItem from \"./post-item\";\r\nimport Loading from \"../../shared/loading\";\r\nimport { useFetch } from \"../../shared/hooks/useFetch\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PostPlaceholer from \"../placeholders/post-placeholder\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst style = {\r\n  height: 30,\r\n  border: \"1px solid green\",\r\n  margin: 6,\r\n  padding: 8,\r\n  color: \"#fff\",\r\n};\r\n\r\nconst RenderPosts = React.memo(({ token, uid, img, username }) => {\r\n  const { request, loading, error } = useFetch();\r\n  const posts = useSelector((state) => state.posts);\r\n  const dispatch = useDispatch();\r\n  const handlePosts = async () => {\r\n    try {\r\n      const responseData = await request(\r\n        process.env.REACT_APP_BACKEND_URL + `/posts?skip=${posts.posts.length}`\r\n      );\r\n      dispatch({\r\n        type: \"FETCH_POSTS\",\r\n        payload: {\r\n          posts: responseData.data.posts,\r\n          length: responseData.data.length,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      console.log(err, error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (!posts.posts.length) handlePosts();\r\n    document.title=\"Spher\"\r\n  }, []);\r\n  let Posts;\r\n  if (posts.posts && posts.posts.length) {\r\n    Posts = (\r\n      <InfiniteScroll\r\n        dataLength={posts.length}\r\n        next={handlePosts}\r\n        hasMore={posts.posts.length < posts.length}\r\n        loader={\r\n          <div>\r\n            <PostPlaceholer />\r\n            <PostPlaceholer />\r\n          </div>\r\n        }\r\n        endMessage={\r\n          <p style={{ textAlign: \"center\" }} className=\"no-more\">\r\n            <b>Yay! You have seen it all</b>\r\n          </p>\r\n        }\r\n      >\r\n        {posts.posts.map((post) => {\r\n          return (\r\n            <PostItem\r\n              key={post._id}\r\n              img={img}\r\n              username={username}\r\n              uid={uid}\r\n              token={token}\r\n              post={post}\r\n            />\r\n          );\r\n        })}\r\n        ;\r\n      </InfiniteScroll>\r\n    );\r\n  } else if (error) {\r\n    Posts = <h1>{error} please try again later.</h1>;\r\n  } else\r\n    Posts = (\r\n      <div>\r\n        <PostPlaceholer />\r\n        <PostPlaceholer />\r\n        <PostPlaceholer />\r\n      </div>\r\n    );\r\n  return <div>{Posts}</div>;\r\n});\r\nexport default RenderPosts;\r\n"]},"metadata":{},"sourceType":"module"}