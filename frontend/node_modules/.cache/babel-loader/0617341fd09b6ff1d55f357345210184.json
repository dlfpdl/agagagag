{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\Desktop\\\\dpma\\\\frontend\\\\src\\\\components\\\\chat\\\\chat-messages.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport ChatHeader from \"./chat-header\";\nimport ChatBody from \"./chat-body\";\nimport ChatSend from \"./chat-send.jsx\";\nimport Loading from \"../../shared/loading.js\";\nimport socket from \"../socket\";\nimport { useSelector } from \"react-redux\";\nimport { useFetch } from \"../../shared/hooks/useFetch\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nconst CahtMessages = React.memo(props => {\n  const user = useSelector(state => state.currentUser);\n  const id = props.match.params.id;\n  const {\n    request,\n    loading,\n    error,\n    clearError\n  } = useFetch();\n  const [messages, setMessages] = useState([]);\n  const [way, setWay] = useState(true);\n  const [roomInfo, setRoomInfo] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [isLoading, setIsLoadind] = useState(true);\n\n  const changeTitle = title => {\n    document.title = title;\n  };\n\n  const fetchRoomsMessages = async newLoad => {\n    try {\n      const response = await request(process.env.REACT_APP_BACKEND_URL + \"/messages\", \"post\", {\n        userId: user._id,\n        roomId: id,\n        skip: newLoad ? 0 : messages.length,\n        newLoad: newLoad ? \"load\" : \"alt\"\n      }, {\n        Authorization: \"Bearer \" + user.token\n      });\n\n      if (newLoad) {\n        setRoomInfo(response.data.roomInfo);\n        if (response.data.roomInfo && response.data.roomInfo.name) changeTitle(`Chat (${response.data.roomInfo.name})`);\n      }\n\n      if (way !== \"render\") setWay(true);\n      if (!newLoad) setMessages(e => [...response.data.messages, ...e]);else setMessages(response.data.messages);\n      if (response.data.messages.length < 20) setHasMore(false);\n    } catch (err) {\n      console.log(err);\n    }\n\n    setIsLoadind(false);\n  };\n\n  const serverSendMessage = message => {\n    setWay(false);\n    setMessages(e => [...e, message]);\n    socket.emit(\"action\", {\n      message,\n      type: \"SEND_MESSAGE\",\n      roomId: id,\n      userId: user._id,\n      username: user.username\n    });\n  };\n\n  useEffect(() => {\n    socket.emit(\"action\", {\n      type: \"JOIN_CHAT_ROOM\",\n      roomId: id\n    });\n    setHasMore(true);\n    setIsLoadind(true);\n    fetchRoomsMessages(true);\n    return () => {\n      socket.emit(\"action\", {\n        type: \"LEAVE_CHAT_ROOM\",\n        roomId: id\n      });\n    };\n  }, [id]);\n  useEffect(() => {\n    socket.on(\"action\", action => {\n      if (action.type === \"ClIENT_SEND_MESSAGE\") {\n        if (way !== \"add\") setWay(\"add\");\n        setMessages(e => [...e, action.message]);\n      }\n    });\n  }, []);\n  if (!id) return null;\n  if (isLoading) return React.createElement(\"div\", {\n    style: {\n      flex: 1,\n      display: \"flex\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    className: \"chat__messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, loading && !messages.length ? React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }) : React.createElement(React.Fragment, null, React.createElement(ChatHeader, {\n    roomInfo: roomInfo,\n    userId: user._id,\n    token: user.token,\n    serverSendMessage: serverSendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(ChatBody, {\n    userId: user._id,\n    hasMore: hasMore,\n    fetchRoomsMessages: fetchRoomsMessages,\n    messages: messages,\n    isLoading: loading,\n    token: user.token,\n    roomId: id,\n    way: way,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(ChatSend, {\n    userId: user._id,\n    token: user.token,\n    serverSendMessage: serverSendMessage,\n    roomId: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })));\n});\nexport default CahtMessages;","map":{"version":3,"sources":["C:/Users/GIGABYTE/Desktop/dpma/frontend/src/components/chat/chat-messages.jsx"],"names":["React","useState","useEffect","ChatHeader","ChatBody","ChatSend","Loading","socket","useSelector","useFetch","InfiniteScroll","CahtMessages","memo","props","user","state","currentUser","id","match","params","request","loading","error","clearError","messages","setMessages","way","setWay","roomInfo","setRoomInfo","hasMore","setHasMore","isLoading","setIsLoadind","changeTitle","title","document","fetchRoomsMessages","newLoad","response","process","env","REACT_APP_BACKEND_URL","userId","_id","roomId","skip","length","Authorization","token","data","name","e","err","console","log","serverSendMessage","message","emit","type","username","on","action","flex","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ChatHeader from \"./chat-header\";\r\nimport ChatBody from \"./chat-body\";\r\nimport ChatSend from \"./chat-send.jsx\";\r\nimport Loading from \"../../shared/loading.js\";\r\nimport socket from \"../socket\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useFetch } from \"../../shared/hooks/useFetch\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\n\r\nconst CahtMessages = React.memo((props) => {\r\n  const user = useSelector((state) => state.currentUser);\r\n  const id = props.match.params.id;\r\n  const { request, loading, error, clearError } = useFetch();\r\n  const [messages, setMessages] = useState([]);\r\n  const [way, setWay] = useState(true);\r\n  const [roomInfo, setRoomInfo] = useState(null);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [isLoading, setIsLoadind] = useState(true);\r\n  const changeTitle=(title)=>{\r\n    document.title=title;\r\n  }\r\n  const fetchRoomsMessages = async (newLoad) => {\r\n    try {\r\n      const response = await request(\r\n        process.env.REACT_APP_BACKEND_URL + \"/messages\",\r\n        \"post\",\r\n        {\r\n          userId: user._id,\r\n          roomId: id,\r\n          skip: newLoad ? 0 : messages.length,\r\n          newLoad: newLoad ? \"load\" : \"alt\",\r\n        },\r\n        {\r\n          Authorization: \"Bearer \" + user.token,\r\n        }\r\n      );\r\n      if (newLoad) {\r\n        setRoomInfo(response.data.roomInfo);\r\n        if(response.data.roomInfo && response.data.roomInfo.name)changeTitle(`Chat (${response.data.roomInfo.name})`)\r\n      }\r\n      if (way !== \"render\") setWay(true);\r\n      if (!newLoad) setMessages((e) => [...response.data.messages, ...e]);\r\n      else setMessages(response.data.messages);\r\n      if (response.data.messages.length < 20) setHasMore(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    setIsLoadind(false);\r\n  };\r\n\r\n  const serverSendMessage = (message) => {\r\n    setWay(false);\r\n    setMessages((e) => [...e, message]);\r\n    socket.emit(\"action\", {\r\n      message,\r\n      type: \"SEND_MESSAGE\",\r\n      roomId: id,\r\n      userId: user._id,\r\n      username: user.username,\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    socket.emit(\"action\", {\r\n      type: \"JOIN_CHAT_ROOM\",\r\n      roomId: id,\r\n    });\r\n    setHasMore(true);\r\n    setIsLoadind(true);\r\n    fetchRoomsMessages(true);\r\n    return () => {\r\n      socket.emit(\"action\", {\r\n        type: \"LEAVE_CHAT_ROOM\",\r\n        roomId: id,\r\n      });\r\n    };\r\n\r\n  }, [id]);\r\n  useEffect(() => {\r\n    socket.on(\"action\", (action) => {\r\n      if (action.type === \"ClIENT_SEND_MESSAGE\") {\r\n        if (way !== \"add\") setWay(\"add\");\r\n        setMessages((e) => [...e, action.message]);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  if (!id) return null;\r\n  if (isLoading)\r\n    return (\r\n      <div style={{ flex: 1, display: \"flex\" }}>\r\n        <Loading />\r\n      </div>\r\n    );\r\n  return (\r\n    <div className=\"chat__messages\">\r\n      {loading && !messages.length ? (\r\n        <Loading />\r\n      ) : (\r\n        <>\r\n          <ChatHeader\r\n            roomInfo={roomInfo}\r\n            userId={user._id}\r\n            token={user.token}\r\n            serverSendMessage={serverSendMessage}\r\n          />\r\n          <ChatBody\r\n            userId={user._id}\r\n            hasMore={hasMore}\r\n            fetchRoomsMessages={fetchRoomsMessages}\r\n            messages={messages}\r\n            isLoading={loading}\r\n            token={user.token}\r\n            roomId={id}\r\n            way={way}\r\n          />\r\n          <ChatSend\r\n            userId={user._id}\r\n            token={user.token}\r\n            serverSendMessage={serverSendMessage}\r\n            roomId={id}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\nexport default CahtMessages;\r\n"]},"metadata":{},"sourceType":"module"}