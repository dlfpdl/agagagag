{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\Desktop\\\\dpma\\\\frontend\\\\src\\\\shared\\\\models\\\\post-model.js\";\nimport React, { useState } from 'react';\nimport Slide from 'react-reveal/Slide';\nimport { Link } from 'react-router-dom';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { useDispatch, useSelector } from 'react-redux';\nimport LoadindModal from './loading-modal';\nimport history from '../../history';\nimport { CSSTransition } from 'react-transition-group';\n\nconst PostModel = ({\n  path,\n  children,\n  title,\n  id\n}) => {\n  const {\n    isLoading,\n    error,\n    sendRequest\n  } = useHttpClient();\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n  const token = useSelector(state => state.isSignedIn);\n\n  const closeModal = () => {\n    if (isOpen) {\n      setIsOpen(false);\n      document.body.style.overflowY = 'auto';\n    }\n  };\n\n  const openModal = () => {\n    if (!isOpen) {\n      setIsOpen(true);\n      document.body.style.overflowY = 'hidden';\n    }\n  };\n\n  const deletePost = async () => {\n    try {\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + `/posts/${id}`, 'DELETE', null, {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      });\n      dispatch({\n        type: 'DELETE_POST',\n        payload: id\n      });\n      console.log(id);\n\n      if (!path) {\n        history.push('');\n      } else {\n        dispatch({\n          type: 'DELETE_USER_POST',\n          payload: id\n        });\n      }\n\n      closeModal();\n    } catch (err) {}\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    style: {\n      display: 'inline-block'\n    },\n    onClick: openModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, children), React.createElement(CSSTransition, {\n    in: isOpen,\n    timeout: 300,\n    classNames: \"modal\",\n    unmountOnExit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"modal__container\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"modal__body\",\n    onClick: e => e.stopPropagation(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"modal__list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"modal__item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Link, {\n    onClick: closeModal,\n    to: {\n      pathname: `/posts/edit/${id}`,\n      state: {\n        title\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Edit Post\")), React.createElement(\"li\", {\n    className: \"modal__item delete\",\n    onClick: () => {\n      deletePost();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, isLoading ? 'Deleting...' : 'Delete Post'), React.createElement(\"li\", {\n    className: \"modal__item\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Cancel\")))))), isLoading && React.createElement(LoadindModal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};\n\nexport default PostModel;","map":{"version":3,"sources":["C:/Users/GIGABYTE/Desktop/dpma/frontend/src/shared/models/post-model.js"],"names":["React","useState","Slide","Link","useHttpClient","useDispatch","useSelector","LoadindModal","history","CSSTransition","PostModel","path","children","title","id","isLoading","error","sendRequest","isOpen","setIsOpen","dispatch","token","state","isSignedIn","closeModal","document","body","style","overflowY","openModal","deletePost","process","env","REACT_APP_BACKEND_URL","Authorization","type","payload","console","log","push","err","display","e","stopPropagation","pathname"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\r\nimport Slide from 'react-reveal/Slide';\r\nimport {Link} from 'react-router-dom';\r\nimport {useHttpClient} from '../../shared/hooks/http-hook';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport LoadindModal from './loading-modal'\r\nimport history from '../../history'\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nconst PostModel=({path,children,title,id})=>{\r\n const { isLoading, error, sendRequest } = useHttpClient();\r\n const [isOpen,setIsOpen]=useState(false);\r\n const dispatch = useDispatch();\r\n const token = useSelector(state=>state.isSignedIn)\r\n  const closeModal = ()=>{\r\n    if(isOpen){\r\n      setIsOpen(false);\r\n       document.body.style.overflowY='auto';\r\n    }\r\n  }\r\n  const openModal=()=>{\r\n    if(!isOpen){\r\n      setIsOpen(true);\r\n      document.body.style.overflowY='hidden';\r\n    }\r\n  }\r\n const deletePost= async ()=>{\r\n    try {\r\n      await sendRequest(\r\n       process.env.REACT_APP_BACKEND_URL+`/posts/${id}`,\r\n        'DELETE',null,{\r\n        'Content-Type': 'application/json',\r\n        Authorization:'Bearer '+ token\r\n     }\r\n      );    \r\n      dispatch({type:'DELETE_POST',payload:id});\r\n      console.log(id)\r\n      if(!path){\r\n        history.push('');\r\n    }\r\n    else{\r\n    dispatch({type:'DELETE_USER_POST',payload:id});\r\n    }\r\n    closeModal();\r\n    } catch (err) {}\r\n}\t\r\nreturn (\r\n        <>\r\n     <div style={{display:'inline-block'}} onClick={openModal}>{children}</div>\r\n      <CSSTransition\r\n        in={isOpen}\r\n        timeout={300}\r\n        classNames=\"modal\"\r\n        unmountOnExit\r\n      >\r\n\t\t<div className=\"modal__container\" onClick={closeModal}>\r\n         <div className=\"modal\">\r\n            <div className=\"modal__body\" onClick={(e)=>e.stopPropagation()} >\r\n             <ul className=\"modal__list\">\r\n             \t<li className=\"modal__item\">\r\n             \t\t<Link onClick={closeModal} to={{\r\n                        pathname:`/posts/edit/${id}`,\r\n                        state:{title}\r\n                         }}\r\n                         >\r\n             \t\tEdit Post\r\n             \t\t</Link>\r\n             \t</li>\r\n             \t<li className=\"modal__item delete\" onClick={()=>{\r\n             \t\tdeletePost();\r\n             \t\t\t\r\n             \t\t\t\r\n             \t}}>\r\n             \t\t{isLoading ? 'Deleting...' :'Delete Post'}\r\n             \t</li>\r\n             \t<li className=\"modal__item\" onClick={closeModal}>\r\n             \t\tCancel\r\n             \t</li>\r\n             </ul>\r\n            </div>\r\n         </div>\r\n\t\t</div>\r\n        </CSSTransition>\r\n        {isLoading && <LoadindModal />}\r\n        </>\r\n\t\t)\r\n}\r\nexport default PostModel;"]},"metadata":{},"sourceType":"module"}