{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\Desktop\\\\dpma\\\\frontend\\\\src\\\\components\\\\chat\\\\chat-body.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { File } from \"../../assets/icons/icons\";\nimport Loading from \"../../shared/loading.js\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport LightboxImages from \"./image-previwer\";\nimport Linkify from \"react-linkify\";\nimport ReactHtmlParser from \"react-html-parser\";\nconst CahtBody = React.memo(({\n  messages,\n  userId,\n  isLoading,\n  fetchRoomsMessages,\n  hasMore,\n  way\n}) => {\n  const bodyRef = useRef(null);\n  const [lastFetchDataLength, setLastFetchDataLength] = useState(0);\n  const [lastHeight, setLastHeight] = useState(0);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const closeLightBox = () => {\n    setIsOpen(false);\n  };\n\n  const getMessageDate = date => {\n    const x = new Date(date).toLocaleTimeString().toString().split(/[\\s:]+/);\n    return x[0] + \":\" + x[1] + \" \" + x[3];\n  };\n\n  const handleFile = (text, fileLink) => {\n    const x = '<a download=\"' + text + '\" href=\"' + fileLink + '\" target=\"_blank\">' + text + \"</a>\";\n    return ReactHtmlParser(x);\n  };\n\n  const getDate = d => {\n    if (new Date().toLocaleDateString() === new Date(d).toLocaleDateString()) return \"today\";else if ((new Date().getTime - new Date(d).getTime()) * 1000 * 3600 < 48) return \"yesterday\";\n    return new Date(d).toDateString();\n  };\n\n  const compareDates = (x, y) => {\n    return new Date(x).toLocaleDateString() !== new Date(y).toLocaleDateString();\n  };\n\n  const handleScroll = () => {\n    if (bodyRef && bodyRef.current && bodyRef.current.scrollTop < 50 && messages.length >= 20 && hasMore && lastFetchDataLength !== messages.length) {\n      setLastFetchDataLength(messages.length);\n      setLastHeight(bodyRef.current.scrollHeight);\n      fetchRoomsMessages();\n    }\n  };\n\n  useEffect(() => {\n    if (bodyRef && bodyRef.current) {\n      if (way) bodyRef.current.scrollTop = bodyRef.current.scrollHeight - lastHeight;else bodyRef.current.scrollTop = bodyRef.current.scrollHeight;\n    }\n  }, [messages.length]);\n  let lastSender = null;\n  let lastDate = null;\n  let images = [];\n  return React.createElement(\"div\", {\n    className: \"chat__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"chat__body__container\",\n    onScroll: handleScroll,\n    ref: bodyRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, isLoading && React.createElement(\"div\", {\n    className: \"loding-more\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), isOpen && React.createElement(LightboxImages, {\n    images: images,\n    closeLightBox: closeLightBox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), messages.length > 0 && messages.map((message, idx) => {\n    if (idx > 0) lastSender = messages[idx - 1].user._id;\n    if (idx !== 0 && compareDates(lastDate, message.createdAt)) lastDate = message.createdAt;\n    if (idx === 0) lastDate = message.createdAt;\n    if (message.messageType === \"image\") images.push(message.fileLink);\n\n    if (message.user._id === undefined && message.user === userId || message.user._id && message.user._id === userId) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, (idx === 0 || lastDate === message.createdAt) && React.createElement(\"div\", {\n        className: \"chat__body__divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, getDate(message.createdAt)), React.createElement(\"div\", {\n        className: \"chat__body__sender\",\n        key: message._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: `message-text ${message.user._id && message.user._id !== lastSender || !message.user._id && message.user !== lastSender ? \"tail\" : \"\"}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, message.messageType === \"text\" ? React.createElement(\"span\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, message.text) : message.messageType === \"image\" ? React.createElement(\"div\", {\n        className: \"message__img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        onClick: () => setIsOpen(true),\n        src: message.fileLink,\n        alt: \"sdfs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"file__icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(File, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        className: \"file__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, handleFile(message.text, message.fileLink))), React.createElement(\"span\", {\n        className: \"time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, getMessageDate(message.createdAt)))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, (idx === 0 || lastDate === message.createdAt) && React.createElement(\"div\", {\n      className: \"chat__body__divider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, getDate(message.createdAt)), React.createElement(\"div\", {\n      className: \"chat__body__reciver\",\n      key: message._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, lastSender !== message.user._id && React.createElement(\"span\", {\n      className: \"chat__body__reciver__username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, message.user.username), React.createElement(\"div\", {\n      className: `message-text ${lastSender !== message.user._id ? \"tail\" : \"\"}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, message.messageType === \"text\" ? React.createElement(\"span\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, message.text) : message.messageType === \"image\" ? React.createElement(\"div\", {\n      className: \"message__img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      onClick: () => setIsOpen(true),\n      src: message.fileLink,\n      alt: \"sdfs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"file__icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(File, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"file__text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, handleFile(message.text, message.fileLink))), React.createElement(\"span\", {\n      className: \"time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, getMessageDate(message.createdAt)))));\n  })));\n});\nexport default CahtBody;","map":{"version":3,"sources":["C:/Users/GIGABYTE/Desktop/dpma/frontend/src/components/chat/chat-body.jsx"],"names":["React","useRef","useEffect","useState","File","Loading","InfiniteScroll","LightboxImages","Linkify","ReactHtmlParser","CahtBody","memo","messages","userId","isLoading","fetchRoomsMessages","hasMore","way","bodyRef","lastFetchDataLength","setLastFetchDataLength","lastHeight","setLastHeight","isOpen","setIsOpen","closeLightBox","getMessageDate","date","x","Date","toLocaleTimeString","toString","split","handleFile","text","fileLink","getDate","d","toLocaleDateString","getTime","toDateString","compareDates","y","handleScroll","current","scrollTop","length","scrollHeight","lastSender","lastDate","images","map","message","idx","user","_id","createdAt","messageType","push","undefined","username"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { File } from \"../../assets/icons/icons\";\r\nimport Loading from \"../../shared/loading.js\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport LightboxImages from \"./image-previwer\";\r\nimport Linkify from \"react-linkify\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nconst CahtBody = React.memo(\r\n  ({ messages, userId, isLoading, fetchRoomsMessages, hasMore, way }) => {\r\n    const bodyRef = useRef(null);\r\n    const [lastFetchDataLength, setLastFetchDataLength] = useState(0);\r\n    const [lastHeight, setLastHeight] = useState(0);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const closeLightBox = () => {\r\n      setIsOpen(false);\r\n    };\r\n    const getMessageDate = (date) => {\r\n      const x = new Date(date)\r\n        .toLocaleTimeString()\r\n        .toString()\r\n        .split(/[\\s:]+/);\r\n      return x[0] + \":\" + x[1] + \" \" + x[3];\r\n    };\r\n    const handleFile = (text, fileLink) => {\r\n      const x =\r\n        '<a download=\"' +\r\n        text +\r\n        '\" href=\"' +\r\n        fileLink +\r\n        '\" target=\"_blank\">' +\r\n        text +\r\n        \"</a>\";\r\n      return ReactHtmlParser(x);\r\n    };\r\n    const getDate = (d) => {\r\n      if (new Date().toLocaleDateString() === new Date(d).toLocaleDateString())\r\n        return \"today\";\r\n      else if ((new Date().getTime - new Date(d).getTime()) * 1000 * 3600 < 48)\r\n        return \"yesterday\";\r\n      return new Date(d).toDateString();\r\n    };\r\n    const compareDates = (x, y) => {\r\n      return (\r\n        new Date(x).toLocaleDateString() !== new Date(y).toLocaleDateString()\r\n      );\r\n    };\r\n    const handleScroll = () => {\r\n      if (\r\n        bodyRef &&\r\n        bodyRef.current &&\r\n        bodyRef.current.scrollTop < 50 &&\r\n        messages.length >= 20 &&\r\n        hasMore &&\r\n        lastFetchDataLength !== messages.length\r\n      ) {\r\n        setLastFetchDataLength(messages.length);\r\n        setLastHeight(bodyRef.current.scrollHeight);\r\n        fetchRoomsMessages();\r\n      }\r\n    };\r\n    useEffect(() => {\r\n      if (bodyRef && bodyRef.current) {\r\n        if (way)\r\n          bodyRef.current.scrollTop = bodyRef.current.scrollHeight - lastHeight;\r\n        else bodyRef.current.scrollTop = bodyRef.current.scrollHeight;\r\n      }\r\n    }, [messages.length]);\r\n    let lastSender = null;\r\n    let lastDate = null;\r\n    let images = [];\r\n    return (\r\n      <div className=\"chat__body\">\r\n        <div\r\n          className=\"chat__body__container\"\r\n          onScroll={handleScroll}\r\n          ref={bodyRef}\r\n        >\r\n          {isLoading && (\r\n            <div className=\"loding-more\">\r\n              <Loading />\r\n            </div>\r\n          )}\r\n          {isOpen && (\r\n            <LightboxImages images={images} closeLightBox={closeLightBox} />\r\n          )}\r\n          {messages.length > 0 &&\r\n            messages.map((message, idx) => {\r\n              if (idx > 0) lastSender = messages[idx - 1].user._id;\r\n              if (idx !== 0 && compareDates(lastDate, message.createdAt))\r\n                lastDate = message.createdAt;\r\n              if (idx === 0) lastDate = message.createdAt;\r\n              if (message.messageType === \"image\")\r\n                images.push(message.fileLink);\r\n              if (\r\n                (message.user._id === undefined && message.user === userId) ||\r\n                (message.user._id && message.user._id === userId)\r\n              ) {\r\n                return (\r\n                  <div>\r\n                    {(idx === 0 || lastDate === message.createdAt) && (\r\n                      <div className=\"chat__body__divider\">\r\n                        {getDate(message.createdAt)}\r\n                      </div>\r\n                    )}\r\n                    <div className=\"chat__body__sender\" key={message._id}>\r\n                      <div\r\n                        className={`message-text ${\r\n                          (message.user._id &&\r\n                            message.user._id !== lastSender) ||\r\n                          (!message.user._id && message.user !== lastSender)\r\n                            ? \"tail\"\r\n                            : \"\"\r\n                        }`}\r\n                      >\r\n                        {message.messageType === \"text\" ? (\r\n                          <span className=\"text\">{message.text}</span>\r\n                        ) : message.messageType === \"image\" ? (\r\n                          <div className=\"message__img\">\r\n                            <img\r\n                              onClick={() => setIsOpen(true)}\r\n                              src={message.fileLink}\r\n                              alt=\"sdfs\"\r\n                            />\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"file\">\r\n                            <span className=\"file__icon\">\r\n                              <File />\r\n                            </span>\r\n                            <span className=\"file__text\">\r\n                              {handleFile(message.text, message.fileLink)}\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                        <span className=\"time\">\r\n                          {getMessageDate(message.createdAt)}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n              return (\r\n                <div>\r\n                  {(idx === 0 || lastDate === message.createdAt) && (\r\n                    <div className=\"chat__body__divider\">\r\n                      {getDate(message.createdAt)}\r\n                    </div>\r\n                  )}\r\n                  <div className=\"chat__body__reciver\" key={message._id}>\r\n                    {lastSender !== message.user._id && (\r\n                      <span className=\"chat__body__reciver__username\">\r\n                        {message.user.username}\r\n                      </span>\r\n                    )}\r\n                    <div\r\n                      className={`message-text ${\r\n                        lastSender !== message.user._id ? \"tail\" : \"\"\r\n                      }`}\r\n                    >\r\n                      {message.messageType === \"text\" ? (\r\n                        <span className=\"text\">{message.text}</span>\r\n                      ) : message.messageType === \"image\" ? (\r\n                        <div className=\"message__img\">\r\n                          <img\r\n                            onClick={() => setIsOpen(true)}\r\n                            src={message.fileLink}\r\n                            alt=\"sdfs\"\r\n                          />\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"file\">\r\n                          <span className=\"file__icon\">\r\n                            <File />\r\n                          </span>\r\n                          <span className=\"file__text\">\r\n                            {handleFile(message.text, message.fileLink)}\r\n                          </span>\r\n                        </div>\r\n                      )}\r\n                      <span className=\"time\">\r\n                        {getMessageDate(message.createdAt)}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\nexport default CahtBody;\r\n"]},"metadata":{},"sourceType":"module"}