{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nexport const useFetch = () => {\n  const [error, setErrors] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const request = useCallback(async (url, method = 'get', data = null, headers = null, params = null) => {\n    try {\n      setLoading(true);\n      const resData = await axios({\n        method,\n        url,\n        data,\n        headers,\n        params\n      });\n      setLoading(false);\n      return resData;\n    } catch (err) {\n      if (err.response) {\n        setError(err.response.data.message);\n      } else {\n        setError(err.message);\n      }\n\n      setLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const setError = err => {\n    setErrors(err);\n  };\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  return {\n    request,\n    error,\n    loading,\n    clearError,\n    setError\n  };\n};","map":{"version":3,"sources":["C:/Users/GIGABYTE/Desktop/dpma/frontend/src/shared/hooks/useFetch.js"],"names":["useState","useEffect","useCallback","axios","useFetch","error","setErrors","loading","setLoading","request","url","method","data","headers","params","resData","err","response","setError","message","clearError"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,SAAjB,EAA2BC,WAA3B,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAI;AAC3B,QAAM,CAACC,KAAD,EAAOC,SAAP,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAASC,UAAT,IAAuBR,QAAQ,CAAC,IAAD,CAArC;AAEA,QAAMS,OAAO,GAAGP,WAAW,CAC1B,OACCQ,GADD,EAECC,MAAM,GAAC,KAFR,EAGCC,IAAI,GAAC,IAHN,EAICC,OAAO,GAAC,IAJT,EAKCC,MAAM,GAAC,IALR,KAKe;AACV,QAAG;AACHN,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMO,OAAO,GAAG,MAAMZ,KAAK,CAAC;AACxBQ,QAAAA,MADwB;AAExBD,QAAAA,GAFwB;AAGxBE,QAAAA,IAHwB;AAIxBC,QAAAA,OAJwB;AAKxBC,QAAAA;AALwB,OAAD,CAA3B;AAOCN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOO,OAAP;AACD,KAXA,CAWA,OAAOC,GAAP,EAAY;AACX,UAAGA,GAAG,CAACC,QAAP,EAAgB;AACdC,QAAAA,QAAQ,CAACF,GAAG,CAACC,QAAJ,CAAaL,IAAb,CAAkBO,OAAnB,CAAR;AACD,OAFD,MAEK;AACHD,QAAAA,QAAQ,CAACF,GAAG,CAACG,OAAL,CAAR;AACD;;AACDX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,YAAMQ,GAAN;AACD;AACL,GA3B0B,EA2BzB,EA3ByB,CAA3B;;AA4BC,QAAME,QAAQ,GAAEF,GAAD,IAAO;AACpBV,IAAAA,SAAS,CAACU,GAAD,CAAT;AACD,GAFD;;AAGD,QAAMI,UAAU,GAAE,MAAI;AACrBF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,GAFD;;AAIC,SAAO;AAACT,IAAAA,OAAD;AAASJ,IAAAA,KAAT;AAAeE,IAAAA,OAAf;AAAuBa,IAAAA,UAAvB;AAAkCF,IAAAA;AAAlC,GAAP;AAED,CAzCM","sourcesContent":["import {useState,useEffect,useCallback} from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const useFetch = ()=>{\r\n\tconst [error,setErrors] = useState(null);\r\n\tconst [loading,setLoading] = useState(null);\r\n\r\n\tconst request = useCallback(\r\n\t\tasync (\r\n\t\t\turl,\r\n\t\t\tmethod='get',\r\n\t\t\tdata=null,\r\n\t\t\theaders=null,\r\n\t\t\tparams=null)=>{\r\n       try{\r\n       setLoading(true); \r\n       const resData = await axios({\r\n          \tmethod,\r\n          \turl,\r\n          \tdata,\r\n          \theaders,\r\n          \tparams\r\n          })\r\n        setLoading(false);\r\n        return resData;\r\n      }catch (err) {\r\n        if(err.response){\r\n          setError(err.response.data.message);\r\n        }else{\r\n          setError(err.message);\r\n        }\r\n        setLoading(false);\r\n        throw err;\r\n      }\r\n\t},[]);\r\n  const setError=(err)=>{\r\n    setErrors(err);\r\n  }\r\n\tconst clearError =()=>{\r\n\t\tsetError(null);\r\n\t}\r\n\r\n  return {request,error,loading,clearError,setError};\r\n\r\n}"]},"metadata":{},"sourceType":"module"}