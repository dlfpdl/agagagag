{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\Desktop\\\\dpma\\\\frontend\\\\src\\\\components\\\\chat\\\\render-friends.jsx\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nconst RenderFriends = React.memo(({\n  rooms\n}) => {\n  const calcPastTime = lastDate => {\n    const leftHours = new Date(new Date().getTime() - new Date(lastDate).getTime()).getTime() / (1000 * 3600);\n\n    if (leftHours < 1) {\n      let t = Math.ceil(leftHours * 60);\n      return t + (t === 1 ? \" M\" : \" MS\");\n    }\n\n    if (leftHours < 24) {\n      let t = Math.floor(leftHours);\n      return t + (t === 1 ? \" H\" : \" HS\");\n    }\n\n    if (leftHours < 24 * 7) {\n      let t = Math.floor(leftHours / 24);\n      return t + (t === 1 ? \" D\" : \" DS\");\n    }\n\n    if (leftHours < 24 * 30) {\n      let t = Math.floor(leftHours / (24 * 7));\n      return t + (t === 1 ? \"W\" : \" WS\");\n    }\n\n    if (leftHours < 365 * 24) {\n      let t = Math.floor(leftHours / (24 * 30));\n      return t + (t === 1 ? \" MN\" : \" MNS\");\n    } else {\n      let t = Math.floor(leftHours / (365 * 24));\n      return t + (t === 1 ? \" Y\" : \" YS\");\n    }\n  };\n\n  if (rooms.length) {\n    return rooms.map(room => {\n      return React.createElement(NavLink, {\n        exact: true,\n        to: `/chat/${room.data._id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: `chat__friends--item ${room.unReadMessages > 0 ? \"unread\" : \"\"}`,\n        key: room.data._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, room.unReadMessages > 0 && React.createElement(\"div\", {\n        className: \"unread__not\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, room.unReadMessages), React.createElement(\"div\", {\n        className: \"chat__friends--user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cf__img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: room.data.chatIcon,\n        alt: \"user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"cf__info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, room.data.name), room.lastMessage && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, room.lastMessage))), React.createElement(\"div\", {\n        className: \"chat__friends--lastsent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, calcPastTime(room.data.updatedAt))), React.createElement(\"div\", {\n        className: \"seprator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    });\n  }\n\n  return React.createElement(\"li\", {\n    className: \"chat__friends--item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"no chats found! \"));\n});\nexport default RenderFriends;","map":{"version":3,"sources":["C:/Users/GIGABYTE/Desktop/dpma/frontend/src/components/chat/render-friends.jsx"],"names":["React","NavLink","RenderFriends","memo","rooms","calcPastTime","lastDate","leftHours","Date","getTime","t","Math","ceil","floor","length","map","room","data","_id","unReadMessages","chatIcon","name","lastMessage","updatedAt"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst RenderFriends = React.memo(({ rooms }) => {\r\n  const calcPastTime = (lastDate) => {\r\n    const leftHours =\r\n      new Date(new Date().getTime() - new Date(lastDate).getTime()).getTime() /\r\n      (1000 * 3600);\r\n    if (leftHours < 1) {\r\n      let t = Math.ceil(leftHours * 60);\r\n      return t + (t === 1 ? \" M\" : \" MS\");\r\n    }\r\n    if (leftHours < 24) {\r\n      let t = Math.floor(leftHours);\r\n      return t + (t === 1 ? \" H\" : \" HS\");\r\n    }\r\n    if (leftHours < 24 * 7) {\r\n      let t = Math.floor(leftHours / 24);\r\n      return t + (t === 1 ? \" D\" : \" DS\");\r\n    }\r\n    if (leftHours < 24 * 30) {\r\n      let t = Math.floor(leftHours / (24 * 7));\r\n      return t + (t === 1 ? \"W\" : \" WS\");\r\n    }\r\n    if (leftHours < 365 * 24) {\r\n      let t = Math.floor(leftHours / (24 * 30));\r\n      return t + (t === 1 ? \" MN\" : \" MNS\");\r\n    } else {\r\n      let t = Math.floor(leftHours / (365 * 24));\r\n      return t + (t === 1 ? \" Y\" : \" YS\");\r\n    }\r\n  };\r\n  if (rooms.length) {\r\n    return rooms.map((room) => {\r\n      return (\r\n        <NavLink exact to={`/chat/${room.data._id}`}>\r\n          <li\r\n            className={`chat__friends--item ${\r\n              room.unReadMessages > 0 ? \"unread\" : \"\"\r\n            }`}\r\n            key={room.data._id}\r\n          >\r\n            {room.unReadMessages > 0 && (\r\n              <div className=\"unread__not\">{room.unReadMessages}</div>\r\n            )}\r\n            <div className=\"chat__friends--user\">\r\n              <div className=\"cf__img\">\r\n                <img src={room.data.chatIcon} alt=\"user\" />\r\n              </div>\r\n              <div className=\"cf__info\">\r\n                <h1>{room.data.name}</h1>\r\n                {room.lastMessage && <p>{room.lastMessage}</p>}\r\n              </div>\r\n            </div>\r\n            <div className=\"chat__friends--lastsent\">\r\n              {calcPastTime(room.data.updatedAt)}\r\n            </div>\r\n          </li>\r\n          <div className=\"seprator\"></div>\r\n        </NavLink>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <li className=\"chat__friends--item\">\r\n      <h1>no chats found! </h1>\r\n    </li>\r\n  );\r\n});\r\nexport default RenderFriends;\r\n"]},"metadata":{},"sourceType":"module"}